
package gestionviajes;

import gestionviajes.BaseDeDatos;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author rubensegura
 */
public class VentanaInformeCondicional extends javax.swing.JDialog {
    
    private BaseDeDatos con;

    /**
     * Creates new form VentanaInformeCondicional
     */
    public VentanaInformeCondicional(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(505, 120);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboDestinos = new javax.swing.JComboBox<>();
        btnGenerarInforme = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Informe de ventas condicional");
        setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N

        comboDestinos.setToolTipText("Selecciona un destino disponible y se activará el botón de generar informe");
        comboDestinos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDestinosActionPerformed(evt);
            }
        });

        btnGenerarInforme.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnGenerarInforme.setText("Generar informe");
        btnGenerarInforme.setToolTipText("Genera un informe en PDF con las ventas del destino seleccionado");
        btnGenerarInforme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarInformeActionPerformed(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("Cancela la generación del informe y vuelve a la ventana principal");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel1.setText("Selecciona un destino de viaje para generar un informe de sus ventas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboDestinos, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGenerarInforme)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboDestinos, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerarInforme)
                    .addComponent(btnCancelar))
                .addGap(16, 16, 16))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comboDestinosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDestinosActionPerformed
        System.out.println("Destino elegido => activo botón generar informe");
        btnGenerarInforme.setEnabled(true);
    }//GEN-LAST:event_comboDestinosActionPerformed

    private void btnGenerarInformeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarInformeActionPerformed
        System.out.println("Genero el informe con el destino seleccionado");
        this.setVisible(false);
        String destino = comboDestinos.getSelectedItem().toString();
        String informe = "/informes/ventasCondicional.jrxml";
        generarInforme(destino, informe);
    }//GEN-LAST:event_btnGenerarInformeActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * Recibe la conexión con BD abierta
     * @param con 
     */
    public void darConexionAbierta(BaseDeDatos con) {
        System.out.println("Paso la conexión BD a ventana de informe condicional");
        this.con = con;
    }
    
    /**
     * Prepara la ventana cargardo los destinos disponibles
     */
    public void preparaVentana() {
        comboDestinos.removeAllItems();
        String destino;
        boolean esta=false;
        ArrayList<String> destinos = new ArrayList<>();
        ResultSet rs;
        PreparedStatement consulta;
        try {
            consulta = this.con.dameConexion().prepareStatement("SELECT * FROM Paquete");
            rs = consulta.executeQuery();
            do {
                destino = rs.getString("destino");
                for (String dt : destinos) {
                    if (dt.equals(destino)) {
                        esta = true;
                    }
                }
                if (!esta) {
                    destinos.add(destino);
                }
                esta = false;
            } while (rs.next());
        } catch (SQLException ex) {
            System.out.println("ERROR AL CARGAR DESTINOS => "+ex.getMessage());
        }
        for (String dt : destinos) {
            comboDestinos.addItem(dt);
        }
        comboDestinos.setSelectedIndex(-1);
        btnGenerarInforme.setEnabled(false);
    }
    /**
     * Genera el informe PDF 
     * @param tipo
     * @param nombre 
     */
    private void generarInforme(String destino, String nombre) {
        Connection conexionBaseDatos = con.dameConexion();
        InputStream jasperStream = (InputStream) getClass().getResourceAsStream(nombre);
        Map parametros = new HashMap();
        parametros.put("CONDICION", destino);
        try {
            JasperReport informeCompilado = JasperCompileManager.compileReport(jasperStream);
            JasperPrint informeRellenado = JasperFillManager.fillReport(informeCompilado, parametros,conexionBaseDatos);
            JasperViewer.viewReport(informeRellenado);
        } catch(JRException e) {
            System.out.println("ERROR AL GENERAR INFORME CLIENTE => "+e.getMessage());
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGenerarInforme;
    private javax.swing.JComboBox<String> comboDestinos;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
