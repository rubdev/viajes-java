
package gestionviajes;

import java.awt.Color;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

/**
 *
 * @author rubensegura
 */
public class NuevoCliente extends javax.swing.JDialog {
    
    // Variables propias
    private BaseDeDatos con;
    private Clientes ventanaClientes;
    private Border bordeDEF;
    
    /**
     * Creates new form NuevoCliente
     */
    public NuevoCliente(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(890,500);
        this.bordeDEF = textoNombre.getBorder();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelNCli = new javax.swing.JLabel();
        labelNombre = new javax.swing.JLabel();
        labelDni = new javax.swing.JLabel();
        labelApellidos = new javax.swing.JLabel();
        labelPasaporte = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        textoPasaporte = new javax.swing.JTextField();
        textoNombre = new javax.swing.JTextField();
        textoApellido = new javax.swing.JTextField();
        idCliente = new javax.swing.JTextField();
        labelTelefono = new javax.swing.JLabel();
        labelEmail = new javax.swing.JLabel();
        labelFechaNacimiento = new javax.swing.JLabel();
        labelDireccion = new javax.swing.JLabel();
        textoTelefono = new javax.swing.JTextField();
        textoDireccion = new javax.swing.JTextField();
        seleccionFecha = new com.toedter.calendar.JDateChooser();
        textoDni = new javax.swing.JFormattedTextField();
        textoEmail1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nuevo cliente");
        setModal(true);
        setResizable(false);

        labelNCli.setFont(new java.awt.Font("Helvetica Neue", 1, 48)); // NOI18N
        labelNCli.setText("Nuevo cliente");
        labelNCli.setToolTipText("Nuevo cliente");
        labelNCli.setPreferredSize(new java.awt.Dimension(750, 500));

        labelNombre.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        labelNombre.setText("Nombre:");
        labelNombre.setToolTipText("Nombre del cliente");

        labelDni.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        labelDni.setText("Dni:");
        labelDni.setToolTipText("Dni del cliente");

        labelApellidos.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        labelApellidos.setText("Apellidos:");
        labelApellidos.setToolTipText("Apellidos del cliente");

        labelPasaporte.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        labelPasaporte.setText("Pasaporte:");
        labelPasaporte.setToolTipText("Pasaporte del cliente (No es obligatorio rellenarlo)");

        btnGuardar.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setToolTipText("Guardar nuevo cliente");
        btnGuardar.setNextFocusableComponent(btnCancelar);
        btnGuardar.setPreferredSize(new java.awt.Dimension(170, 80));
        btnGuardar.setSelected(true);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setToolTipText("Modificar cliente");
        btnModificar.setPreferredSize(new java.awt.Dimension(170, 80));
        btnModificar.setSelected(true);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("Cancelar y volver a gestión de clientes");
        btnCancelar.setPreferredSize(new java.awt.Dimension(170, 80));
        btnCancelar.setSelected(true);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        textoPasaporte.setToolTipText("Introduce aquí el pasaporte del cliente (No es obligatorio)");
        textoPasaporte.setNextFocusableComponent(textoTelefono);
        textoPasaporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoPasaporteActionPerformed(evt);
            }
        });

        textoNombre.setToolTipText("Introduce aquí el nombre del cliente");
        textoNombre.setNextFocusableComponent(textoApellido);
        textoNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoNombreActionPerformed(evt);
            }
        });

        textoApellido.setToolTipText("Introduce aquí los apellidos del cliente");
        textoApellido.setNextFocusableComponent(textoDni);
        textoApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoApellidoActionPerformed(evt);
            }
        });

        idCliente.setToolTipText("");
        idCliente.setEnabled(false);
        idCliente.setFocusable(false);
        idCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idClienteActionPerformed(evt);
            }
        });

        labelTelefono.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        labelTelefono.setText("Teléfono:");
        labelTelefono.setToolTipText("Teléfono del cliente");

        labelEmail.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        labelEmail.setText("Email:");
        labelEmail.setToolTipText("Email del cliente");

        labelFechaNacimiento.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        labelFechaNacimiento.setText("Fecha de nacimiento:");
        labelFechaNacimiento.setToolTipText("Fecha de nacimiento del cliente");

        labelDireccion.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        labelDireccion.setText("Dirección:");
        labelDireccion.setToolTipText("Dirección del cliente");

        textoTelefono.setToolTipText("Introduce aquí el email del cliente");
        textoTelefono.setNextFocusableComponent(seleccionFecha);
        textoTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoTelefonoActionPerformed(evt);
            }
        });

        textoDireccion.setToolTipText("Introduce aquí la dirección del cliente");
        textoDireccion.setNextFocusableComponent(btnGuardar);
        textoDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoDireccionActionPerformed(evt);
            }
        });

        seleccionFecha.setToolTipText("Pulse en el calendario y seleccione una fecha de nacimiento del nuevo cliente");
        seleccionFecha.setFocusable(false);
        seleccionFecha.setNextFocusableComponent(textoDireccion);

        try {
            textoDni.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("########U")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        textoDni.setNextFocusableComponent(textoPasaporte);
        textoDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoDniActionPerformed(evt);
            }
        });

        textoEmail1.setToolTipText("Introduce aquí el email del cliente");
        textoEmail1.setNextFocusableComponent(textoDireccion);
        textoEmail1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoEmail1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(idCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(labelPasaporte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                .addComponent(textoPasaporte, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelNombre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(labelApellidos)
                                        .addGap(57, 57, 57))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labelDni)
                                        .addGap(120, 120, 120)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textoApellido, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                                    .addComponent(textoDni))))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(labelEmail)
                                .addGap(212, 212, 212)
                                .addComponent(textoEmail1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelFechaNacimiento)
                                    .addComponent(labelDireccion)
                                    .addComponent(labelTelefono))
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textoDireccion, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                                    .addComponent(textoTelefono, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                                    .addComponent(seleccionFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addComponent(labelNCli, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(labelNCli, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombre)
                    .addComponent(textoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTelefono)
                    .addComponent(textoTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelApellidos)
                            .addComponent(textoApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelEmail)
                            .addComponent(textoEmail1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelDni)
                                    .addComponent(labelFechaNacimiento)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(textoDni, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(seleccionFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPasaporte)
                    .addComponent(textoPasaporte, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDireccion)
                    .addComponent(textoDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        labelNCli.getAccessibleContext().setAccessibleDescription("Gestión de clientes");

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        System.out.println("Guardar nuevo cliente pulsado");
        // recojo datos del formulario
        String nombre = textoNombre.getText();
        String apellidos = textoApellido.getText();
        String dni = textoDni.getText().trim();
        String pasaporte = textoPasaporte.getText();
        String telefono = textoTelefono.getText().trim();
        String email = textoEmail1.getText();
        String direccion = textoDireccion.getText();
        String fechaSTR="";
        int telefonoParse=0;
        // compruebo los datos introducidos en el formulario sean correctos
        boolean todoCorrecto = true;
        // compruebo campo nombre
        if (nombre.equals("")) {
            this.setVisible(false);
            textoNombre.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo nombre vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (nombre.length()>50) {
            this.setVisible(false);
            textoNombre.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El nombre no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoNombre.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo campo apellidos
        if (apellidos.equals("")) {
            this.setVisible(false);
            textoApellido.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo apellidos vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (apellidos.length()>100) {
            this.setVisible(false);
            textoApellido.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El apellido no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoApellido.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo campo dni
        if (dni.equals("")) {
            this.setVisible(false);
            textoDni.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo dni vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (dni.length()>9) {
            this.setVisible(false);
            textoDni.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El dni no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoDni.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo campo pasaporte
        if (pasaporte.equals("")) {
            this.setVisible(false);
            textoPasaporte.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo pasaporte vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (pasaporte.length()>9) {
            this.setVisible(false);
            textoPasaporte.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El pasaporte no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoPasaporte.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo campo email
        if (email.equals("")) {
            this.setVisible(false);
            textoEmail1.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo email vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (email.length()>50) {
            this.setVisible(false);
            textoEmail1.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El email no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoEmail1.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo campo direccion
        if (direccion.equals("")) {
            this.setVisible(false);
            textoDireccion.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo dirección vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (direccion.length()>100) {
            this.setVisible(false);
            textoDireccion.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El campo dirección no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoDireccion.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo fecha nacimiento
        try {
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd-MM-yyyy");
            Date fechaNacimiento = seleccionFecha.getDate(); //Cojo fecha del calendario
            System.out.println(fechaNacimiento);
            fechaSTR = formatoFecha.format(fechaNacimiento);
        } catch(Exception e) {
            this.setVisible(false);
            JOptionPane.showMessageDialog(null, "No puedes dejar la fecha de nacimiento vacía","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        }
        // compruebo que nombre y apellidos sean solo letras
        if (Pattern.matches("[a-zA-Z]*", nombre) == false || Pattern.matches("[a-zA-Z]*", apellidos) == false) {
            this.setVisible(false);
            JOptionPane.showMessageDialog(null, "El nombre y apellido sólo puede ser texto","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        }
        // compruebo campo telefono
        if (telefono.equals("")) {
            this.setVisible(false);
            textoTelefono.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo teléfono vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (telefono.length()>9) {
            this.setVisible(false);
            textoTelefono.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El teléfono no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (telefono.length()<9) {
            this.setVisible(false);
            JOptionPane.showMessageDialog(null, "El teléfono debe tener 9 dígitos","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoTelefono.setBorder(new LineBorder(Color.GREEN));
        }
        try {
            telefonoParse = Integer.parseInt(telefono);
        } catch(NumberFormatException ex) {
            this.setVisible(false);
            JOptionPane.showMessageDialog(null, "El teléfono debe estar compuesto sólo por números","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        }
        // activo el formulario de nuevo
        this.setVisible(true);
        if (todoCorrecto) {
            System.out.println("TODO ESTÁ CORRECTO PARA INSERTAT NUEVO CLIENTE");
            try {
                PreparedStatement consulta;
                consulta=this.con.dameConexion().prepareStatement("INSERT INTO Cliente (nombre,apellidos,fechaNacimiento,dni,pasaporte,telefono,email,direccion) VALUES (?,?,?,?,?,?,?,?)");
                consulta.setString(1, nombre);
                consulta.setString(2, apellidos);
                consulta.setString(3, fechaSTR);
                consulta.setString(4, dni);
                consulta.setString(5, pasaporte);
                consulta.setString(6, telefono);
                consulta.setString(7, email);
                consulta.setString(8, direccion);
                consulta.executeUpdate();
                this.setVisible(false);
                JOptionPane.showMessageDialog(null, "El cliente ha sido añadido correctamente","Cliente añadido", JOptionPane.INFORMATION_MESSAGE);
                ventanaClientes.listarClientes("", "",false);
            }catch(SQLException e) {
                this.setVisible(false);
                JOptionPane.showMessageDialog(null, e.getMessage(),"Error SQL", JOptionPane.WARNING_MESSAGE);
                this.setVisible(true);
            }
        } else {
            System.out.println("No se puede insertar, corrige campos erróneos");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        System.out.println("Modificar cliente pulsado");
        // recojo datos del formulario
        String nombre = textoNombre.getText();
        String apellidos = textoApellido.getText();
        String dni = textoDni.getText().trim();
        String pasaporte = textoPasaporte.getText();
        String telefono = textoTelefono.getText().trim();
        String email = textoEmail1.getText();
        String direccion = textoDireccion.getText();
        String fechaSTR="";
        int telefonoParse=0;
        
        // compruebo los datos introducidos en el formulario sean correctos
        boolean todoCorrecto = true;
        // compruebo campo nombre
        if (nombre.equals("")) {
            this.setVisible(false);
            textoNombre.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo nombre vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (nombre.length()>50) {
            this.setVisible(false);
            textoNombre.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El nombre no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoNombre.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo campo apellidos
        if (apellidos.equals("")) {
            this.setVisible(false);
            textoApellido.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo apellidos vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (apellidos.length()>100) {
            this.setVisible(false);
            textoApellido.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El apellido no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoApellido.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo campo dni
        if (dni.equals("")) {
            this.setVisible(false);
            textoDni.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo dni vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (dni.length()>9) {
            this.setVisible(false);
            textoDni.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El dni no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoDni.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo campo pasaporte
        if (pasaporte.equals("")) {
            this.setVisible(false);
            textoPasaporte.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo pasaporte vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (pasaporte.length()>9) {
            this.setVisible(false);
            textoPasaporte.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El pasaporte no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoPasaporte.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo campo email
        if (email.equals("")) {
            this.setVisible(false);
            textoEmail1.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo email vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (email.length()>50) {
            this.setVisible(false);
            textoEmail1.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El email no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoEmail1.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo campo direccion
        if (direccion.equals("")) {
            this.setVisible(false);
            textoDireccion.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo dirección vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (direccion.length()>100) {
            this.setVisible(false);
            textoDireccion.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El campo dirección no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoDireccion.setBorder(new LineBorder(Color.GREEN));
        }
        // compruebo fecha nacimiento
        try {
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd-MM-yyyy");
            Date fechaNacimiento = seleccionFecha.getDate(); //Cojo fecha del calendario
            System.out.println(fechaNacimiento);
            fechaSTR = formatoFecha.format(fechaNacimiento);
        } catch(Exception e) {
            this.setVisible(false);
            JOptionPane.showMessageDialog(null, "No puedes dejar la fecha de nacimiento vacía","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        }
        // compruebo que nombre y apellidos sean solo letras
        if (Pattern.matches("[a-zA-Z]*", nombre) == false || Pattern.matches("[a-zA-Z]*", apellidos) == false) {
            this.setVisible(false);
            JOptionPane.showMessageDialog(null, "El nombre y apellido sólo puede ser texto","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        }
        // compruebo campo telefono
        if (telefono.equals("")) {
            this.setVisible(false);
            textoTelefono.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo teléfono vacío","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (telefono.length()>9) {
            this.setVisible(false);
            textoTelefono.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "El teléfono no puede ser tan largo","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else if (telefono.length()<9) {
            this.setVisible(false);
            JOptionPane.showMessageDialog(null, "El teléfono debe tener 9 dígitos","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        } else {
            textoTelefono.setBorder(new LineBorder(Color.GREEN));
        }
        try {
            telefonoParse = Integer.parseInt(telefono);
        } catch(NumberFormatException ex) {
            this.setVisible(false);
            JOptionPane.showMessageDialog(null, "El teléfono debe estar compuesto sólo por números","Error", JOptionPane.WARNING_MESSAGE);
            todoCorrecto = false;
        }
        int idCli = Integer.parseInt(idCliente.getText());
        // activo el formulario de nuevo
        this.setVisible(true);
        // si todo correcto actualizo los datos
        if (todoCorrecto) {
            System.out.println("TODO ESTÁ CORRECTO PARA MODIFICAR NUEVO CLIENTE");
            try {
                PreparedStatement consulta;
                consulta=this.con.dameConexion().prepareStatement("UPDATE Cliente SET nombre = ?, apellidos = ?, fechaNacimiento = ?, dni = ?, pasaporte = ?, telefono = ?, email = ?, direccion = ? WHERE clienteID = ?");
                consulta.setString(1, nombre);
                consulta.setString(2, apellidos);
                consulta.setString(3, fechaSTR);
                consulta.setString(4, dni);
                consulta.setString(5, pasaporte);
                consulta.setString(6, telefono);
                consulta.setString(7, email);
                consulta.setString(8, direccion);
                consulta.setInt(9, idCli);
                consulta.executeUpdate();
                this.setVisible(false);
                JOptionPane.showMessageDialog(null, "El cliente ha sido modificado correctamente","Cliente modificado", JOptionPane.INFORMATION_MESSAGE);
                ventanaClientes.listarClientes("","",false);
                ventanaClientes.desactivarBotones();
            }catch(SQLException e) {
                this.setVisible(false);
                JOptionPane.showMessageDialog(null, e.getMessage(),"Error SQL", JOptionPane.WARNING_MESSAGE);
                this.setVisible(true);
            }
        } else {
            System.out.println("LOS DATOS DE MODIFICAR CLIENTE NO ESTÁN BIEN");
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        System.out.println("Cancelar pulsado, se sale a gestión de clientes");
        ventanaClientes.desactivarBotones();
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void textoPasaporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoPasaporteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoPasaporteActionPerformed

    private void textoNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoNombreActionPerformed

    private void textoApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoApellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoApellidoActionPerformed

    private void idClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idClienteActionPerformed

    private void textoTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoTelefonoActionPerformed

    private void textoDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoDireccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoDireccionActionPerformed

    private void textoDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoDniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoDniActionPerformed

    private void textoEmail1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoEmail1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoEmail1ActionPerformed
    
    /**
     * Cuando se quiere añadir un nuevo cliente se prepara el formulario
     * limpiando sus campos, cambiando el título del formulario y desactivando
     * la casilla del id del cliente
     */
    public void preparaFormularioNuevoCliente() {
        System.out.println("Preparo el formulario para la creación de un nuevo cliente");
        labelNCli.setText("Nuevo cliente");
        btnCancelar.setEnabled(true);
        btnGuardar.setEnabled(true);
        btnModificar.setEnabled(false);
        textoNombre.setText("");
        textoNombre.requestFocus();
        textoNombre.setBorder(bordeDEF);
        textoApellido.setText("");
        textoApellido.setBorder(bordeDEF);
        textoDni.setText("");
        textoDni.setBorder(bordeDEF);
        textoPasaporte.setText("");
        textoPasaporte.setBorder(bordeDEF);
        textoTelefono.setText("");
        textoTelefono.setBorder(bordeDEF);
        textoEmail1.setText("");
        textoEmail1.setBorder(bordeDEF);
        textoDireccion.setText("");
        textoDireccion.setBorder(bordeDEF);
        seleccionFecha.setDate(null);
        seleccionFecha.getDateEditor().setEnabled(false);
        idCliente.setVisible(false);
        idCliente.setText("");
    }
    
    public void preparaFormularioModificarCliente(int id,String nombre, String apellidos, String fecha, String dni, String pasaporte,String telefono, String email, String direccion) {
        System.out.println("Preparo el formulario para modiricar un cliente seleccionado");
        labelNCli.setText("Modificar cliente");
        btnCancelar.setEnabled(true);
        btnModificar.setEnabled(true);
        btnGuardar.setEnabled(false);
        idCliente.setText(Integer.toString(id));
        idCliente.setVisible(false);
        textoNombre.setText(nombre);
        textoApellido.setText(apellidos);
        textoDni.setText(dni);
        textoPasaporte.setText(pasaporte);
        textoTelefono.setText(telefono);
        textoEmail1.setText(email);
        textoDireccion.setText(direccion);
        Date fnac = null;
        try {
            fnac = new SimpleDateFormat("dd-MM-yyyy").parse(fecha);
        } catch (ParseException ex) {
            System.out.println("ERROR AL PONER FECHA MODIFICAR => "+ex.getMessage());
        }
        seleccionFecha.setDate(fnac);
        textoNombre.requestFocus();
    }
    
    /**
     * Obtengo la fecha de nacimiento seleccionada en el datepicker
     * 
     * @return fechaSTR
     */
    private String obtenerFechaNacimiento() {
        SimpleDateFormat formatoFecha = new SimpleDateFormat("dd-MM-yyyy");
        Date fechaNacimiento = seleccionFecha.getDate(); //Cojo fecha del calendario
        String fechaSTR = formatoFecha.format(fechaNacimiento);
        return fechaSTR;
    }
    
    /**
     * Compruebo si hay una fecha de nacimiento correcta introducida
     * 
     * @return fechaCorrecta
     */
    private boolean fechaNacimientoCorrecta() {
        boolean fechaCorrecta = false;
        if (seleccionFecha.getDate() != null) {
            fechaCorrecta = true;
        }
        return fechaCorrecta;
    }
    
    /**
     * Me permite pasar la conexión con la base de datos entre la ventana
     * cliente y la de nuevo clientes
     *
     * @param con
     */
    public void darConexionAbierta(BaseDeDatos con) {
        System.out.println("Paso la conexión BD a nuevo clientes");
        this.con = con;
    }
    
    /**
     * Me permite pasar la ventana de clientes actual abierta  entre la ventana
     * cliente y la de nuevo cliente
     *
     * @param ventanaClientes 
     */
    public void dameVentanaClientes(Clientes ventanaClientes) {
        System.out.println("Paso la ventana de clientes abierta");
        this.ventanaClientes = ventanaClientes;
    }
    
    /**
     * Función a la que se le pasa un ID cuando se quiere modificar
     * un cliente y cargar el formulario con los datos de este ya rellenados
     * @param id 
     */
    public void ponerIdCliente(int id) {
        this.idCliente.setText(Integer.toString(id));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JTextField idCliente;
    private javax.swing.JLabel labelApellidos;
    private javax.swing.JLabel labelDireccion;
    private javax.swing.JLabel labelDni;
    private javax.swing.JLabel labelEmail;
    private javax.swing.JLabel labelFechaNacimiento;
    private javax.swing.JLabel labelNCli;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelPasaporte;
    private javax.swing.JLabel labelTelefono;
    private com.toedter.calendar.JDateChooser seleccionFecha;
    private javax.swing.JTextField textoApellido;
    private javax.swing.JTextField textoDireccion;
    private javax.swing.JFormattedTextField textoDni;
    private javax.swing.JTextField textoEmail1;
    private javax.swing.JTextField textoNombre;
    private javax.swing.JTextField textoPasaporte;
    private javax.swing.JTextField textoTelefono;
    // End of variables declaration//GEN-END:variables
}
