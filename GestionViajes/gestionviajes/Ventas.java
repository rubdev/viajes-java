package gestionviajes;

import java.awt.Frame;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rubensegura
 */
public class Ventas extends javax.swing.JDialog {

    // Declaración de variables propias
    private NuevaVenta nuevaVenta = new NuevaVenta((Frame) getParent(), rootPaneCheckingEnabled);
    private BaseDeDatos con;

    /**
     * Creates new form Ventas
     */
    public Ventas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(918, 565);
        configuraTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuEmergente = new javax.swing.JPopupMenu();
        jMenuItemModificar = new javax.swing.JMenuItem();
        jMenuItemEliminar = new javax.swing.JMenuItem();
        labelGVent = new javax.swing.JLabel();
        btnVentasNuevo = new javax.swing.JButton();
        btnVentasModificar = new javax.swing.JButton();
        btnVentasEliminar = new javax.swing.JButton();
        btnVentasSalir = new javax.swing.JButton();
        comboVentas = new javax.swing.JComboBox<>();
        textoBusqueda = new javax.swing.JTextField();
        btnVentasBuscar = new javax.swing.JButton();
        jScrollPaneVentas = new javax.swing.JScrollPane();
        jTableVentas = new javax.swing.JTable();

        jMenuItemModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar.png"))); // NOI18N
        jMenuItemModificar.setText("jMenuItem1");
        jMenuItemModificar.setToolTipText("");
        jMenuItemModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemModificarActionPerformed(evt);
            }
        });
        jPopupMenuEmergente.add(jMenuItemModificar);

        jMenuItemEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eliminar.png"))); // NOI18N
        jMenuItemEliminar.setText("jMenuItem1");
        jMenuItemEliminar.setToolTipText("");
        jMenuItemEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEliminarActionPerformed(evt);
            }
        });
        jPopupMenuEmergente.add(jMenuItemEliminar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestión de ventas");

        labelGVent.setFont(new java.awt.Font("Helvetica Neue", 1, 48)); // NOI18N
        labelGVent.setText("Ventas");
        labelGVent.setToolTipText("Gestión de ventas");
        labelGVent.setPreferredSize(new java.awt.Dimension(750, 500));

        btnVentasNuevo.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnVentasNuevo.setMnemonic('A');
        btnVentasNuevo.setText("Añadir");
        btnVentasNuevo.setToolTipText("Añadir una nueva venta");
        btnVentasNuevo.setPreferredSize(new java.awt.Dimension(170, 80));
        btnVentasNuevo.setSelected(true);
        btnVentasNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVentasNuevoActionPerformed(evt);
            }
        });

        btnVentasModificar.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnVentasModificar.setMnemonic('M');
        btnVentasModificar.setText("Modificar");
        btnVentasModificar.setToolTipText("Selecciona una venta del listado y pulsa aquí para modificar sus datos");
        btnVentasModificar.setPreferredSize(new java.awt.Dimension(170, 80));
        btnVentasModificar.setSelected(true);
        btnVentasModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVentasModificarActionPerformed(evt);
            }
        });

        btnVentasEliminar.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnVentasEliminar.setMnemonic('E');
        btnVentasEliminar.setText("Eliminar");
        btnVentasEliminar.setToolTipText("Selecciona una venta del listado y pulsa aquí para eliminarlo");
        btnVentasEliminar.setPreferredSize(new java.awt.Dimension(170, 80));
        btnVentasEliminar.setSelected(true);
        btnVentasEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVentasEliminarActionPerformed(evt);
            }
        });

        btnVentasSalir.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnVentasSalir.setMnemonic('S');
        btnVentasSalir.setText("Salir");
        btnVentasSalir.setToolTipText("Salir al menú principal de gestión de viajes");
        btnVentasSalir.setMinimumSize(new java.awt.Dimension(170, 33));
        btnVentasSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVentasSalirActionPerformed(evt);
            }
        });

        comboVentas.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        comboVentas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cliente", "Paquete", "Fecha de inicio", "Fecha de fin" }));
        comboVentas.setToolTipText("Selecciona un parámetro del combobox para realizar una búsqueda de ventas");
        comboVentas.setMinimumSize(new java.awt.Dimension(500, 40));
        comboVentas.setPreferredSize(new java.awt.Dimension(150, 40));
        comboVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboVentasActionPerformed(evt);
            }
        });

        textoBusqueda.setFont(new java.awt.Font("Helvetica", 0, 12)); // NOI18N
        textoBusqueda.setText("Introduce término de búsqueda...");
        textoBusqueda.setToolTipText("Introduce término de búsqueda de ventas aquí");
        textoBusqueda.setPreferredSize(new java.awt.Dimension(250, 40));
        textoBusqueda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                focoBuscar(evt);
            }
        });
        textoBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoBusquedaActionPerformed(evt);
            }
        });

        btnVentasBuscar.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        btnVentasBuscar.setMnemonic('B');
        btnVentasBuscar.setText("Buscar por");
        btnVentasBuscar.setToolTipText("Pulsa para realizar una búsqueda de ventas");
        btnVentasBuscar.setPreferredSize(new java.awt.Dimension(170, 40));
        btnVentasBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVentasBuscarActionPerformed(evt);
            }
        });

        jTableVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Cliente", "Paquete", "Fecha de venta", "Fecha de inicio", "Fecha de fin"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableVentas.setToolTipText("");
        jTableVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableVentasMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                VentaSeleccionadaEnLista(evt);
            }
        });
        jTableVentas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableVentasKeyPressed(evt);
            }
        });
        jScrollPaneVentas.setViewportView(jTableVentas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelGVent, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVentasModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVentasNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVentasEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVentasSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboVentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(textoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnVentasBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPaneVentas))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelGVent, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnVentasBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(textoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVentasNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(btnVentasModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(btnVentasEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(btnVentasSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPaneVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(31, 31, 31))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnVentasNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVentasNuevoActionPerformed
        System.out.println("Voy a añasdir una venta");
        nuevaVenta.darConexionAbierta(con);
        nuevaVenta.dameVentanaVentas(this);
        nuevaVenta.preparaFormularioNuevaVenta();
        nuevaVenta.setAlwaysOnTop(true);
        nuevaVenta.setVisible(true);
    }//GEN-LAST:event_btnVentasNuevoActionPerformed

    private void btnVentasModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVentasModificarActionPerformed
        System.out.println("Voy a modificar venta seleccionada");
        modificarVenta();
    }//GEN-LAST:event_btnVentasModificarActionPerformed

    private void btnVentasEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVentasEliminarActionPerformed
        System.out.println("Voy a eliminar una venta seleccionada");
        eliminarVenta();
    }//GEN-LAST:event_btnVentasEliminarActionPerformed

    private void btnVentasSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVentasSalirActionPerformed
        System.out.println("Cierro la ventana de gestión de ventas");
        this.setVisible(false);
    }//GEN-LAST:event_btnVentasSalirActionPerformed

    private void comboVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboVentasActionPerformed
        System.out.println("Selecciono elemento del combobox de ventas");
        btnVentasBuscar.setEnabled(true);
    }//GEN-LAST:event_comboVentasActionPerformed

    private void textoBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoBusquedaActionPerformed
        System.out.println("Se escribe término de búsqueda en ventas");
    }//GEN-LAST:event_textoBusquedaActionPerformed

    private void btnVentasBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVentasBuscarActionPerformed
        String seleccionCombo = comboVentas.getSelectedItem().toString().toLowerCase();
        String buscar = textoBusqueda.getText();
        System.out.println("Se pulsa en buscar ventas por " + seleccionCombo + " y " + buscar);
        listarVentas(seleccionCombo, buscar, true);
        btnVentasBuscar.setEnabled(false);
    }//GEN-LAST:event_btnVentasBuscarActionPerformed

    private void focoBuscar(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_focoBuscar
        // TODO add your handling code here:
        textoBusqueda.setText("");
    }//GEN-LAST:event_focoBuscar

    private void VentaSeleccionadaEnLista(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VentaSeleccionadaEnLista
        if (evt.getClickCount() == 2) {
            System.out.println("Hago dobleClick en venta => abro para modificarla");
            modificarVenta();
        } else if (evt.getClickCount() == 1) {
            if (evt.getButton() == 3) {
                jMenuItemModificar.setText("Editar");
                jMenuItemModificar.setIcon(new ImageIcon("src/img/editar.png"));
                jMenuItemModificar.setToolTipText("<html>Pulse para <b>editar</b> la venta selecionada</html>");
                jMenuItemEliminar.setToolTipText("<html>Pulse para <b>eliminar</b> la venta seleccionada</html>");
                jMenuItemEliminar.setText("Eliminar");
                jMenuItemEliminar.setIcon(new ImageIcon("src/img/eliminar.png"));
                jPopupMenuEmergente.show(evt.getComponent(), evt.getX(), evt.getY());
            } else {
                System.out.println("Hago un click en elemento de la lista ventas => activo los botones");
                activarBotones();
            }
        }
    }//GEN-LAST:event_VentaSeleccionadaEnLista

    /**
     * Modifica una vente desde el menú emergente popup
     *
     * @param evt
     */
    private void jMenuItemModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemModificarActionPerformed
        System.out.println("Menu emergente modificar venta pulsado");
        modificarVenta();
    }//GEN-LAST:event_jMenuItemModificarActionPerformed

    /**
     * Borra una venta desde el menú emergente popup
     *
     * @param evt
     */
    private void jMenuItemEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEliminarActionPerformed
        System.out.println("Menú emergente eliminar venta seleccionado");
        eliminarVenta();
    }//GEN-LAST:event_jMenuItemEliminarActionPerformed

    /**
     * Devuelve la fila seleccionada al sacar el menú popup
     *
     * @param evt
     */
    private void jTableVentasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVentasMouseReleased
        int fila = this.jTableVentas.rowAtPoint(evt.getPoint());
        if (fila > -1) {
            this.jTableVentas.setRowSelectionInterval(fila, fila);
        }
    }//GEN-LAST:event_jTableVentasMouseReleased

    /**
     * Activa funciones modificar y borrar al pulsar ciertar teclas sobre una
     * venta en la tabla
     *
     * @param evt
     */
    private void jTableVentasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableVentasKeyPressed
        System.out.println("Tecla pulsada en tabla ventas");
        char teclaPulsada = evt.getKeyChar();
        int codigoTecla = evt.getKeyCode();
        System.out.println("Tecla: " + teclaPulsada + " | Código: " + codigoTecla);
        if (codigoTecla == 77 || codigoTecla == 10) {
            System.out.println("A Modificar venta tecla");
            modificarVenta();
        } else if (codigoTecla == 8) {
            System.out.println("A eliminar venta tecla");
            eliminarVenta();
        } else {
            System.out.println("No hay función asignada a la tecla");
        }
    }//GEN-LAST:event_jTableVentasKeyPressed

    /**
     * Desactiva botones innecesarios al abrir una nueva ventana de este tipo
     */
    public void desactivarBotones() {
        System.out.println("Desactivo botones de modificar, buscar y eliminar ventas, pongo el combo sin selección");
        comboVentas.setSelectedIndex(-1);
        btnVentasModificar.setEnabled(false);
        btnVentasEliminar.setEnabled(false);
        btnVentasBuscar.setEnabled(false);
    }

    /**
     * Activa los botones cuando se da el caso necesario al seleccionar venta
     */
    public void activarBotones() {
        System.out.println("Activo los botones modificar y eliminar");
        btnVentasModificar.setEnabled(true);
        btnVentasEliminar.setEnabled(true);
    }

    /**
     * Me devuelve el id de un cliente asociado a una venta
     *
     * @param nombreCliente
     * @return id del cliente asociado
     */
    private int dameIdClienteSeleccionado(String nombreCliente) {
        int idCliente = 0;
        PreparedStatement consulta;
        ResultSet rs;
        try {
            consulta = this.con.dameConexion().prepareStatement("SELECT idCli FROM Venta V, Cliente C WHERE V.IdCli = C.clienteID AND C.nombre = ?");
            consulta.setString(1, nombreCliente);
            rs = consulta.executeQuery();
            idCliente = rs.getInt("idCli");
            System.out.println("ID del CLIENTE EN VENTA => " + idCliente);
        } catch (SQLException ex) {
            System.out.println("ERROR SQL => " + ex.getMessage());
        }
        return idCliente;
    }

    /**
     * Me devuelve el id de un paquete asociado a una venta
     *
     * @param nombrePaquete
     * @return id del paquete asociado
     */
    private int dameIdPaqueteSeleccionado(String nombrePaquete) {
        int idPaquete = 0;
        PreparedStatement consulta;
        ResultSet rs;
        try {
            consulta = this.con.dameConexion().prepareStatement("SELECT idPaq FROM Venta V, Paquete P WHERE V.IdPaq = P.paqueteID AND P.nombre = ?");
            consulta.setString(1, nombrePaquete);
            rs = consulta.executeQuery();
            idPaquete = rs.getInt("idPaq");
            System.out.println("ID del PAQUETE EN VENTA => " + idPaquete);
        } catch (SQLException ex) {
            System.out.println("ERROR SQL => " + ex.getMessage());
        }
        return idPaquete;
    }

    /**
     * Me permite pasar la conexión con la base de datos entre la ventana
     * principal y la de ventas
     *
     * @param con
     */
    public void darConexionAbierta(BaseDeDatos con) {
        System.out.println("Paso la conexión BD a ventas");
        this.con = con;
    }

    /**
     * Función que modifica una venta seleccionada en la tabla de listado de
     * vetnas
     */
    private void modificarVenta() {
        int fila = jTableVentas.getSelectedRow();
        int idVenta, idCliente, idPaquete;
        String fechaInicio, fechaFin, nombreCliente, nombrePaquete;
        idVenta = (Integer) jTableVentas.getModel().getValueAt(fila, 0);
        nombreCliente = (String) jTableVentas.getModel().getValueAt(fila, 1);
        nombrePaquete = (String) jTableVentas.getModel().getValueAt(fila, 2);
        fechaInicio = (String) jTableVentas.getModel().getValueAt(fila, 4);
        fechaFin = (String) jTableVentas.getModel().getValueAt(fila, 5);
        idCliente = dameIdClienteSeleccionado(nombreCliente);
        idPaquete = dameIdPaqueteSeleccionado(nombrePaquete);
        nuevaVenta.darConexionAbierta(con);
        nuevaVenta.dameVentanaVentas(this);
        nuevaVenta.preparaFormularioModificarVenta(idVenta, idCliente, idPaquete, nombreCliente, nombrePaquete, fechaInicio, fechaFin);
        nuevaVenta.setAlwaysOnTop(true);
        nuevaVenta.setVisible(true);
    }

    /**
     * Función que elimina una ventas seleccionada en la tabla de listado de
     * ventas
     */
    private void eliminarVenta() {
        int fila = jTableVentas.getSelectedRow();
        int idVenta = (Integer) jTableVentas.getModel().getValueAt(fila, 0);
        System.out.println("ID de la VENTA que vas a borrar => " + idVenta);
        int opcion = JOptionPane.showConfirmDialog(null, "¿Realmente deseas eliminar la venta seleccionanda?", "¡Atención!", JOptionPane.YES_NO_OPTION);
        if (opcion == 0) {
            System.out.println("Se confirma la eliminación de venta");
            PreparedStatement consulta;
            try {
                consulta = this.con.dameConexion().prepareStatement("DELETE FROM Venta WHERE ventaID = ?");
                consulta.setInt(1, idVenta);
                consulta.execute();
                JOptionPane.showMessageDialog(null, "La venta se ha eliminado correctamente", "Venta eliminada", JOptionPane.INFORMATION_MESSAGE);
                listarVentas("", "", false);
            } catch (SQLException ex) {
                System.out.println("ERROR AL BORRAR VENTA => " + ex.getMessage());
            }
        } else {
            System.out.println("se anula la eliminación de venta");
        }
        desactivarBotones();
    }

    /**
     * Lista las ventas en el jTable de ventas
     */
    public void listarVentas(String tipo, String busqueda, boolean esBusqueda) {
        DefaultTableModel model = (DefaultTableModel) this.jTableVentas.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        try {
            ResultSet rs;
            String mensaje;
            String tipoConsulta = "";
            if (tipo.equals("")) {
                System.out.println("Listo todos las ventas");
                System.out.println("Entro a hacer la consulta de todas las ventas");
                rs = this.con.consulta.executeQuery("SELECT ventaID ,fechaVenta, fechaInicio, fechaFin, C.nombre AS nombreCliente, P.nombre AS nombrePaquete FROM Cliente C, Paquete P, Venta V WHERE V.IdCli = C.clienteID AND V.IdPaq = P.paqueteID");
                if (rs.next()) {
                    do {
                        model.addRow(new Object[]{
                            rs.getInt("ventaID"),
                            rs.getString("nombreCliente"),
                            rs.getString("nombrePaquete"),
                            rs.getString("fechaVenta"),
                            rs.getString("fechaInicio"),
                            rs.getString("fechaFin")
                        });
                    } while (rs.next());
                }
            } else {
                System.out.println("Listo ventas por " + tipo + " y " + busqueda);
                busqueda = "%" + busqueda + "%";
                PreparedStatement consulta = null;
                if (tipo.equals("paquete")) {
                    System.out.println("=> Voy a buscar venta por nombre de PAQUETE");
                    consulta = this.con.dameConexion().prepareStatement("SELECT ventaID ,fechaVenta, fechaInicio, fechaFin, C.nombre AS nombreCliente, P.nombre AS nombrePaquete FROM Cliente C, Paquete P, Venta V WHERE V.IdCli = C.clienteID AND V.IdPaq = P.paqueteID AND nombrePaquete LIKE ?");
                    consulta.setString(1, busqueda);
                } else if (tipo.equals("cliente")) {
                    System.out.println("=> Voy a buscar venta por nombre de CLIENTE");
                    consulta = this.con.dameConexion().prepareStatement("SELECT ventaID ,fechaVenta, fechaInicio, fechaFin, C.nombre AS nombreCliente, P.nombre AS nombrePaquete FROM Cliente C, Paquete P, Venta V WHERE V.IdCli = C.clienteID AND V.IdPaq = P.paqueteID AND nombreCliente LIKE ?");
                    consulta.setString(1, busqueda);
                } else if (tipo.equals("fecha de inicio")) {
                    System.out.println("=> Voy a buscar venta por nombre de FECHA INICIO");
                    consulta = this.con.dameConexion().prepareStatement("SELECT ventaID ,fechaVenta, fechaInicio, fechaFin, C.nombre AS nombreCliente, P.nombre AS nombrePaquete FROM Cliente C, Paquete P, Venta V WHERE V.IdCli = C.clienteID AND V.IdPaq = P.paqueteID AND fechaInicio LIKE ?");
                    consulta.setString(1, busqueda);
                } else if (tipo.equals("fecha de fin")) {
                    System.out.println("=> Voy a buscar venta por nombre de FECHA FIN");
                    consulta = this.con.dameConexion().prepareStatement("SELECT ventaID ,fechaVenta, fechaInicio, fechaFin, C.nombre AS nombreCliente, P.nombre AS nombrePaquete FROM Cliente C, Paquete P, Venta V WHERE V.IdCli = C.clienteID AND V.IdPaq = P.paqueteID AND fechaFin LIKE ?");
                    consulta.setString(1, busqueda);
                }
                rs = consulta.executeQuery();
                if (esBusqueda && !rs.next()) {
                    mensaje = "No se han encontrado coincidencias en la búsqueda con los parámetros indicados.";
                    JOptionPane.showMessageDialog(null, mensaje, "Resultado de la búsqueda", JOptionPane.INFORMATION_MESSAGE);
                    listarVentas("", "", false);
                    desactivarBotones();
                } else {
                    do {
                        model.addRow(new Object[]{
                            rs.getInt("ventaID"),
                            rs.getString("nombreCliente"),
                            rs.getString("nombrePaquete"),
                            rs.getString("fechaVenta"),
                            rs.getString("fechaInicio"),
                            rs.getString("fechaFin")
                        });
                    } while (rs.next());
                }
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    private void configuraTabla() {
        jTableVentas.getTableHeader().setReorderingAllowed(false);
        jTableVentas.setDefaultEditor(Object.class, null);
        jTableVentas.setToolTipText("<html>\n<b>Listado de ventas</b> guardadas en la base de datos.\n<br>"
                + "Con <b>un click</b> sobre una <b>venta</b> se activan las funciones <b>borrar</b>"
                + " y <b>modificar</b> \n<br>"
                + "Con <b>dobleclick</b> se abre ventana modificación de venta seleccionada. \n<br>"
                + "Pulsando <b>botón derecho</b> se abre un <b>menú emergente</b> de opciones \n<br>"
                + "Pulsando <b>intro</b> o <b>m</b> se abre ventana modificación de venta seleccionada.\n<br>"
                + "Pulsando <b>retroceso</b> se eliminará la venta seleccionada.</html>");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVentasBuscar;
    private javax.swing.JButton btnVentasEliminar;
    private javax.swing.JButton btnVentasModificar;
    private javax.swing.JButton btnVentasNuevo;
    private javax.swing.JButton btnVentasSalir;
    private javax.swing.JComboBox<String> comboVentas;
    private javax.swing.JMenuItem jMenuItemEliminar;
    private javax.swing.JMenuItem jMenuItemModificar;
    private javax.swing.JPopupMenu jPopupMenuEmergente;
    private javax.swing.JScrollPane jScrollPaneVentas;
    private javax.swing.JTable jTableVentas;
    private javax.swing.JLabel labelGVent;
    private javax.swing.JTextField textoBusqueda;
    // End of variables declaration//GEN-END:variables
}
