package gestionviajes;

import java.awt.Frame;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rubensegura
 */
public class Clientes extends javax.swing.JDialog {

    // Declaración de variables propias
    private NuevoCliente nuevoCliente = new NuevoCliente((Frame) getParent(), rootPaneCheckingEnabled);
    private BaseDeDatos con;

    /**
     * Creates new form Clientes
     */
    public Clientes(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(900, 565);
        configuraTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuEmergente = new javax.swing.JPopupMenu();
        jMenuItemEditar = new javax.swing.JMenuItem();
        jMenuItemEliminar = new javax.swing.JMenuItem();
        labelGCli = new javax.swing.JLabel();
        btnClientesModificar = new javax.swing.JButton();
        btnClientesEliminar = new javax.swing.JButton();
        btnClientesNuevo = new javax.swing.JButton();
        btnClientesSalir = new javax.swing.JButton();
        comboClientes = new javax.swing.JComboBox<>();
        textoBusqueda = new javax.swing.JTextField();
        btnClientesBuscar = new javax.swing.JButton();
        jScrollPaneClientes = new javax.swing.JScrollPane();
        jTableClientes = new javax.swing.JTable();

        jMenuItemEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar.png"))); // NOI18N
        jMenuItemEditar.setText("jMenuItem1");
        jMenuItemEditar.setToolTipText("");
        jMenuItemEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditarActionPerformed(evt);
            }
        });
        jPopupMenuEmergente.add(jMenuItemEditar);

        jMenuItemEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eliminar.png"))); // NOI18N
        jMenuItemEliminar.setText("jMenuItem1");
        jMenuItemEliminar.setToolTipText("");
        jMenuItemEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEliminarActionPerformed(evt);
            }
        });
        jPopupMenuEmergente.add(jMenuItemEliminar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestión de clientes");
        setResizable(false);

        labelGCli.setFont(new java.awt.Font("Helvetica Neue", 1, 48)); // NOI18N
        labelGCli.setText("Clientes");
        labelGCli.setToolTipText("Gestión de clientes");
        labelGCli.setPreferredSize(new java.awt.Dimension(750, 500));

        btnClientesModificar.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnClientesModificar.setMnemonic('M');
        btnClientesModificar.setText("Modificar");
        btnClientesModificar.setToolTipText("Selecciona un cliente del listado y pulsa aquí para modificar sus datos");
        btnClientesModificar.setPreferredSize(new java.awt.Dimension(170, 80));
        btnClientesModificar.setSelected(true);
        btnClientesModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClientesModificarActionPerformed(evt);
            }
        });

        btnClientesEliminar.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnClientesEliminar.setMnemonic('E');
        btnClientesEliminar.setText("Eliminar");
        btnClientesEliminar.setToolTipText("Selecciona un cliente del listado y pulsa aquí para eliminarlo");
        btnClientesEliminar.setPreferredSize(new java.awt.Dimension(170, 80));
        btnClientesEliminar.setSelected(true);
        btnClientesEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClientesEliminarActionPerformed(evt);
            }
        });

        btnClientesNuevo.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnClientesNuevo.setMnemonic('A');
        btnClientesNuevo.setText("Añadir");
        btnClientesNuevo.setToolTipText("Añadir un nuevo cliente");
        btnClientesNuevo.setPreferredSize(new java.awt.Dimension(170, 80));
        btnClientesNuevo.setSelected(true);
        btnClientesNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClientesNuevoActionPerformed(evt);
            }
        });

        btnClientesSalir.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnClientesSalir.setMnemonic('S');
        btnClientesSalir.setText("Salir");
        btnClientesSalir.setToolTipText("Salir al menú principal de gestión de viajes");
        btnClientesSalir.setMinimumSize(new java.awt.Dimension(170, 33));
        btnClientesSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClientesSalirActionPerformed(evt);
            }
        });

        comboClientes.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        comboClientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Apellidos", "Dni", "Pasaporte" }));
        comboClientes.setToolTipText("Selecciona un parámetro del combobox para realizar una búsqueda de clientes");
        comboClientes.setMinimumSize(new java.awt.Dimension(500, 40));
        comboClientes.setPreferredSize(new java.awt.Dimension(150, 40));
        comboClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboClientesActionPerformed(evt);
            }
        });

        textoBusqueda.setFont(new java.awt.Font("Helvetica", 0, 12)); // NOI18N
        textoBusqueda.setText("Introduce término de búsqueda...");
        textoBusqueda.setToolTipText("Introduce término de búsqueda de clientes aquí");
        textoBusqueda.setPreferredSize(new java.awt.Dimension(250, 40));
        textoBusqueda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                focoBuscar(evt);
            }
        });
        textoBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoBusquedaActionPerformed(evt);
            }
        });

        btnClientesBuscar.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        btnClientesBuscar.setMnemonic('B');
        btnClientesBuscar.setText("Buscar por");
        btnClientesBuscar.setToolTipText("Pulsa para realizar una búsqueda de clientes");
        btnClientesBuscar.setPreferredSize(new java.awt.Dimension(170, 40));
        btnClientesBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClientesBuscarActionPerformed(evt);
            }
        });

        jTableClientes.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        jTableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Apellidos", "Fecha nac.", "Dni", "Pasaporte", "Teléfono", "Email", "Dirección"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableClientes.setToolTipText("");
        jTableClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableClientesMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clienteSeleccionadoEnLista(evt);
            }
        });
        jTableClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableClientesKeyPressed(evt);
            }
        });
        jScrollPaneClientes.setViewportView(jTableClientes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelGCli, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClientesNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClientesModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClientesEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClientesSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(textoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnClientesBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPaneClientes))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelGCli, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnClientesBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(textoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClientesNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(btnClientesModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(btnClientesEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(btnClientesSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPaneClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnClientesModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientesModificarActionPerformed
        System.out.println("Voy a modificar un cliente seleccionado");
        modificarCliente();
    }//GEN-LAST:event_btnClientesModificarActionPerformed

    private void btnClientesEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientesEliminarActionPerformed
        System.out.println("Voy a eliminar un cliente seleccionado");
        eliminarCliente();
    }//GEN-LAST:event_btnClientesEliminarActionPerformed

    private void btnClientesNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientesNuevoActionPerformed
        System.out.println("Voy a añadir un nuevo cliente");
        nuevoCliente.darConexionAbierta(con);
        nuevoCliente.dameVentanaClientes(this);
        nuevoCliente.preparaFormularioNuevoCliente();
        nuevoCliente.setAlwaysOnTop(true);
        nuevoCliente.setVisible(true);
    }//GEN-LAST:event_btnClientesNuevoActionPerformed

    private void btnClientesSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientesSalirActionPerformed
        System.out.println("Cierro la ventana de gestión de clientes");
        this.setVisible(false);
    }//GEN-LAST:event_btnClientesSalirActionPerformed

    private void comboClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboClientesActionPerformed
        System.out.println("Selecciono elemento del combobox de clientes");
        btnClientesBuscar.setEnabled(true);
    }//GEN-LAST:event_comboClientesActionPerformed

    private void textoBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoBusquedaActionPerformed
        System.out.println("Se escribe término de búsqueda en clientes");
    }//GEN-LAST:event_textoBusquedaActionPerformed

    private void btnClientesBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientesBuscarActionPerformed
        String seleccionCombo = comboClientes.getSelectedItem().toString();
        String buscar = textoBusqueda.getText();
        System.out.println("Se pulsa en buscar clientes por " + seleccionCombo + " y " + buscar);
        listarClientes(seleccionCombo, buscar,true);
        btnClientesBuscar.setEnabled(false);
    }//GEN-LAST:event_btnClientesBuscarActionPerformed

    /**
     * Limpia el cuadro de texto cuando se pulsa para buscar
     *
     * @param evt
     */
    private void focoBuscar(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_focoBuscar
        textoBusqueda.setText("");
    }//GEN-LAST:event_focoBuscar

    /**
     * Evento que al seleccionar cliente de la lista activa los botones de
     * modificar y eliminar o abre popup
     *
     * @param evt
     */
    private void clienteSeleccionadoEnLista(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clienteSeleccionadoEnLista
        if (evt.getClickCount() == 2) {
            System.out.println("Hago dobleclick en un cliente del lista y abro modificar");
            modificarCliente();
        } else if (evt.getClickCount() == 1) {
            if (evt.getButton() == 3) {
                jMenuItemEditar.setText("Editar");
                jMenuItemEditar.setToolTipText("<html>Pulse para <b>editar</b> el cliente seleccionado</html>");
                jMenuItemEditar.setIcon(new ImageIcon("src/img/editar.png"));
                jMenuItemEliminar.setText("Eliminar");
                jMenuItemEliminar.setToolTipText("<html>Pulse para <b>eliminar</b> el cliente seleccionado</html>");
                jMenuItemEliminar.setIcon(new ImageIcon("src/img/eliminar.png"));
                jPopupMenuEmergente.show(evt.getComponent(), evt.getX(), evt.getY());
            } else {
                System.out.println("Un Click en lista de clientes");
                activarBotones();
            }
        }

    }//GEN-LAST:event_clienteSeleccionadoEnLista

    /**
     * Abre ventana modificar cliente desde menú emergente popup
     *
     * @param evt
     */
    private void jMenuItemEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditarActionPerformed
        System.out.println("Pulsa en editar menú emergente");
        modificarCliente();
    }//GEN-LAST:event_jMenuItemEditarActionPerformed

    /**
     * Borra un cliente desde el menú emergente popup
     *
     * @param evt
     */
    private void jMenuItemEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEliminarActionPerformed
        System.out.println("Pulsa en borrar menú emergente");
        eliminarCliente();
    }//GEN-LAST:event_jMenuItemEliminarActionPerformed

    /**
     * Devuelve la fila seleccionada al sacar el menú popup
     *
     * @param evt
     */
    private void jTableClientesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableClientesMouseReleased
        int fila = this.jTableClientes.rowAtPoint(evt.getPoint());
        if (fila > -1) {
            this.jTableClientes.setRowSelectionInterval(fila, fila);
        }
    }//GEN-LAST:event_jTableClientesMouseReleased

    /**
     * Activa funciones modificar y borrar al pulsar ciertar teclas sobre un
     * cliente en la tabla
     *
     * @param evt
     */
    private void jTableClientesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableClientesKeyPressed
        System.out.println("Tecla pulsada en tabla clientes");
        char teclaPulsada = evt.getKeyChar();
        int codigoTecla = evt.getKeyCode();
        System.out.println("Tecla: " + teclaPulsada + " | Código: " + codigoTecla);
        if (codigoTecla == 77 || codigoTecla == 10) {
            System.out.println("LLamo a modificar cliente seleccionado");
            modificarCliente();
        } else if (codigoTecla == 8) {
            System.out.println("LLamo a borrar cliente seleccionado");
            eliminarCliente();
        } else {
            System.out.println("No hay función asignada a esa tecla");
        }
    }//GEN-LAST:event_jTableClientesKeyPressed

    /**
     * Función que modifica un cliente seleccionada en la tabla de listado de
     * clientes
     */
    private void modificarCliente() {
        int fila = jTableClientes.getSelectedRow();
        int idCliente = (Integer) jTableClientes.getModel().getValueAt(fila, 0);
        String nombre = (String) jTableClientes.getModel().getValueAt(fila, 1);
        String apellidos = (String) jTableClientes.getModel().getValueAt(fila, 2);
        String fecha = (String) jTableClientes.getModel().getValueAt(fila, 3);
        String dni = (String) jTableClientes.getModel().getValueAt(fila, 4);
        String pasaporte = (String) jTableClientes.getModel().getValueAt(fila, 5);
        String telefono = (String) jTableClientes.getModel().getValueAt(fila, 6);
        String email = (String) jTableClientes.getModel().getValueAt(fila, 7);
        String direccion = (String) jTableClientes.getModel().getValueAt(fila, 8);
        nuevoCliente.darConexionAbierta(con);
        nuevoCliente.dameVentanaClientes(this);
        nuevoCliente.preparaFormularioModificarCliente(idCliente, nombre, apellidos, fecha, dni, pasaporte, telefono, email, direccion);
        nuevoCliente.setAlwaysOnTop(true);
        nuevoCliente.setVisible(true);
    }
    
    /**
     * Función que elimina un cliente seleccionada en la tabla de listado de
     * clientes
     */
    private void eliminarCliente() {
        int fila = jTableClientes.getSelectedRow();
        int idCliente = (Integer) jTableClientes.getModel().getValueAt(fila, 0);
        System.out.println("ID CLIENTE A BORRAR => " + idCliente);
        int opcion = JOptionPane.showConfirmDialog(null, "¿Realmente deseas eliminar el cliente seleccionado?", "¡Atención!", JOptionPane.YES_NO_OPTION);
        // 0 es si, 1 es no
        if (opcion == 0) {
            System.out.println("Confirmo eliminación");
            PreparedStatement consulta;
            try {
                consulta = this.con.dameConexion().prepareStatement("DELETE FROM Cliente WHERE clienteID = ?");
                consulta.setInt(1, idCliente);
                consulta.execute();
                JOptionPane.showMessageDialog(null, "El cliente ha sido eliminado correctamente", "Cliente eliminado", JOptionPane.INFORMATION_MESSAGE);
                listarClientes("", "",false);
            } catch (SQLException ex) {
                System.out.println("ERROR AL BORRAR CLIENTE => " + ex.getMessage());
            }

        } else {
            System.out.println("No voy a eliminarlo finalmente");
        }
        desactivarBotones();
    }

    /**
     * Desactiva botones innecesarios al abrir una nueva ventana de este tipo
     */
    public void desactivarBotones() {
        System.out.println("Desactivo botones de modificar, buscar y eliminar cliente, pongo el combo sin selección");
        comboClientes.setSelectedIndex(-1);
        btnClientesModificar.setEnabled(false);
        btnClientesEliminar.setEnabled(false);
        btnClientesBuscar.setEnabled(false);
    }

    /**
     * Activo botonoes tras seleccion
     */
    private void activarBotones() {
        System.out.println("activo BORRAR Y MODIFICAR");
        btnClientesModificar.setEnabled(true);
        btnClientesEliminar.setEnabled(true);
    }

    /**
     * Lista los clientes en la tabla
     */
    public void listarClientes(String tipo, String busqueda, boolean esBusqueda) {
        DefaultTableModel model = (DefaultTableModel) this.jTableClientes.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        try {
            ResultSet rs;
            String mensaje;
            if (tipo.equals("")) {
                System.out.println("Listo todos los clientes");
                rs = this.con.consulta.executeQuery("SELECT * FROM Cliente");
                if (rs.next()) {
                    do {
                        model.addRow(new Object[]{
                            rs.getInt("clienteID"),
                            rs.getString("nombre"),
                            rs.getString("apellidos"),
                            rs.getString("fechaNacimiento"),
                            rs.getString("dni"),
                            rs.getString("pasaporte"),
                            rs.getString("telefono"),
                            rs.getString("email"),
                            rs.getString("direccion")
                        });
                    } while (rs.next());
                }
            } else {
                System.out.println("Listo los clientes por tipo " + tipo + " y " + busqueda);
                busqueda = "%" + busqueda + "%";
                PreparedStatement consulta;
                consulta = this.con.dameConexion().prepareStatement("SELECT * FROM Cliente WHERE " + tipo + " LIKE ?");
                consulta.setString(1, busqueda);
                rs = consulta.executeQuery();
                if (esBusqueda && !rs.next()) {
                    mensaje = "No se han encontrado coincidencias en la búsqueda con los parámetros indicados.";
                    JOptionPane.showMessageDialog(null, mensaje, "Resultado de la búsqueda", JOptionPane.INFORMATION_MESSAGE);
                    listarClientes("", "",false);
                    textoBusqueda.setText("Introduce término de búsqueda...");
                    desactivarBotones();
                } else {
                    do {
                        model.addRow(new Object[]{
                            rs.getInt("clienteID"),
                            rs.getString("nombre"),
                            rs.getString("apellidos"),
                            rs.getString("fechaNacimiento"),
                            rs.getString("dni"),
                            rs.getString("pasaporte"),
                            rs.getString("telefono"),
                            rs.getString("email"),
                            rs.getString("direccion")
                        });
                    } while (rs.next());
                }   
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Me permite pasar la conexión con la base de datos entre la ventana
     * principal y la de clientes
     *
     * @param con
     */
    public void darConexionAbierta(BaseDeDatos con) {
        System.out.println("Paso la conexión BD a clientes");
        this.con = con;
    }

    private void configuraTabla() {
        jTableClientes.getTableHeader().setReorderingAllowed(false);
        jTableClientes.setDefaultEditor(Object.class, null);
        jTableClientes.setToolTipText("<html>\n<b>Listado de clientes</b> guardados en la base de datos.\n<br>"
                + "Con <b>un click</b> sobre un <b>cliente</b> se activan las funciones <b>borrar</b>"
                + " y <b>modificar</b>. \n<br>"
                + "Con <b>dobleclick</b> se abre ventana modificación de cliente seleccionado. \n<br>"
                + "Pulsando <b>botón derecho</b> se abre un <b>menú emergente</b> de opciones.\n<br>"
                + "Pulsando <b>intro</b> o <b>m</b> se abre ventana modificación de cliente seleccionado.\n<br>"
                + "Pulsando <b>retroceso</b> se eliminará el cliente seleccionado.</html>");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClientesBuscar;
    private javax.swing.JButton btnClientesEliminar;
    private javax.swing.JButton btnClientesModificar;
    private javax.swing.JButton btnClientesNuevo;
    private javax.swing.JButton btnClientesSalir;
    private javax.swing.JComboBox<String> comboClientes;
    private javax.swing.JMenuItem jMenuItemEditar;
    private javax.swing.JMenuItem jMenuItemEliminar;
    private javax.swing.JPopupMenu jPopupMenuEmergente;
    private javax.swing.JScrollPane jScrollPaneClientes;
    private javax.swing.JTable jTableClientes;
    private javax.swing.JLabel labelGCli;
    private javax.swing.JTextField textoBusqueda;
    // End of variables declaration//GEN-END:variables
}
